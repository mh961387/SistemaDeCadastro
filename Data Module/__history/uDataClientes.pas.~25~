unit uDataClientes;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, uDataPrincipal, uCliente;

type
  TdmClientes = class(TDataModule)
    qryClientes: TFDQuery;
    qryClientesCLI_ID: TFDAutoIncField;
    qryClientesCLI_NOME: TStringField;
    qryClientesCLI_CPF: TStringField;
    qryClientesCLI_FONE: TStringField;
    qryClientesCLI_DTNASC: TDateField;
    qryClientesCLI_CEP: TStringField;
    qryClientesCLI_LONGRADOURO: TStringField;
    qryClientesCLI_BAIRRO: TStringField;
    qryClientesCLI_CIDADE: TStringField;
    qryClientesCLI_ESTADO: TStringField;
    qryClientesCLI_COMPLEMENTO: TStringField;
    qryClientesCLI_SEXO: TStringField;
    dsClientes: TDataSource;
    qryVerificacaoCPFCliente: TFDQuery;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    function VerificarCPFCliente(ACPF: string): Boolean;
    procedure InserirClientes(ACliente: TCliente; Oper: integer);
  end;

var
  dmClientes: TdmClientes;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TdmClientes.DataModuleCreate(Sender: TObject);
begin
  qryClientes.Open();
end;

procedure TdmClientes.InserirClientes(ACliente: TCliente; Oper: integer);
begin
  if oper = 0 then
    qryClientes.Insert
  else if Oper = 1 then
    qryClientes.Edit;

  qryClientesCLI_NOME.AsString        := ACliente.Nome;
  qryClientesCLI_CPF.AsString         := ACliente.CPF;
  qryClientesCLI_FONE.AsString        := ACliente.Telefone;
  qryClientesCLI_DTNASC.AsDateTime    := ACliente.DataNascimento;
  qryClientesCLI_CEP.AsString         := ACliente.CEP;
  qryClientesCLI_LONGRADOURO.AsString := ACliente.Longradouro;
  qryClientesCLI_BAIRRO.AsString      := ACliente.Bairro;
  qryClientesCLI_CIDADE.AsString      := ACliente.Cidade;
  qryClientesCLI_ESTADO.AsString      := ACliente.Estado;
  qryClientesCLI_COMPLEMENTO.AsString := ACliente.Complemento;
  qryClientesCLI_SEXO.AsString        := ACliente.Sexo;
  qryClientes.Post;
  qryClientes.Refresh;
end;

function TdmClientes.VerificarCPFCliente(ACPF: string): Boolean;
begin
  qryVerificacaoCPFCliente.Close;
  qryVerificacaoCPFCliente.ParamByName('CPF').AsString := ACPF;
  qryVerificacaoCPFCliente.Open();

  Result := qryVerificacaoCPFCliente.RecordCount > 0;
end;

end.
