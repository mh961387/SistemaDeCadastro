unit uFormLogin;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uFormAncestral, Vcl.AppEvnts,
  Vcl.StdCtrls, System.Actions, Vcl.ActnList, uUsuario;

type
  TfrmLogin = class(TfrmAncestral)
    edtLogin: TEdit;
    edtSenha: TEdit;
    btnAcesso: TButton;
    Label1: TLabel;
    procedure btnAcessoClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    { Private declarations }
    FUsuario: TUsuario;
    procedure PreencherUsuario;
  public
    { Public declarations }
  end;

var
  frmLogin: TfrmLogin;

implementation

uses
  uFormMenu, uDataUsuarios;

{$R *.dfm}

procedure TfrmLogin.btnAcessoClick(Sender: TObject);
begin
  inherited;
  PreencherUsuario;
  try
    if dmUsuarios.ValidacaoLogin(FUsuario) then
    begin
      if not Assigned(frmMenu) then
        frmMenu := TfrmMenu.Create(frmLogin);
      frmMenu.ShowModal;
    end
    else
      MessageDlg('O usuário ou senha informado esta invalido!', mtWarning, [mbOK], 0);
  finally
    begin
      if Assigned(frmMenu) then
      begin
        FreeAndNil(frmMenu);
        LimparDados;
      end;
    end;

  end;
end;

procedure TfrmLogin.FormCreate(Sender: TObject);
begin
  inherited;
  if not Assigned(dmUsuarios) then
    dmUsuarios := TdmUsuarios.Create(frmLogin);
end;

procedure TfrmLogin.FormDestroy(Sender: TObject);
begin
  inherited;
  if Assigned(dmUsuarios) then
    FreeAndNil(dmUsuarios);
end;

procedure TfrmLogin.PreencherUsuario;
begin
  if not Assigned(FUsuario) then
    FUsuario := TUsuario.Create;

  FUsuario.Login := edtLogin.Text;
  FUsuario.Senha := edtSenha.Text;
end;

end.
